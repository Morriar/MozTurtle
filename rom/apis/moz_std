-------------------------------------------------------
----- Moz Standard
--
-- Tools & utils
--
-------------------------------------------------------

--print("loading std")
os.loadAPI("/rom/apis/moz_core")

-- Logger
-- abstract base class
Logger = moz_core.obj.declare_class("Logger")

Logger.DEBUG = 1
Logger.INFO = 2
Logger.WARNING = 3
Logger.ERROR = 4
Logger.FATAL = 5

Logger.levels = {"debug", "info", "warning", "error", "fatal"}

function Logger:init(min_level)
    if min_level == nil then
	min_level = Logger.INFO
    end
    self.min_level = min_level
end

function Logger:debug(message)
    self:log(Logger.DEBUG, message)
end

function Logger:info(message)
    self:log(Logger.INFO, message)
end

function Logger:warning(message)
    self:log(Logger.WARNING, message)
end

function Logger:error(message)
    self:log(Logger.ERROR, message)
end

function Logger:fatal(message)
    self:log(Logger.FATAL, message)
end

function Logger:log(level, message)
    if level < self.min_level then return end
    self:write("["..self.levels[level].."] " .. tostring(message))
end

function Logger:write(message)
    error("Logger:write is abstract")
end

-- ConsoleLogger
-- print log on console
ConsoleLogger = moz_core.obj.declare_class("ConsoleLogger", Logger)

function ConsoleLogger:write(message)
    print(message)
end

-- FileLogger
-- print log in file
FileLogger = moz_core.obj.declare_class("FileLogger", Logger)

function FileLogger:init(level, path)
    FileLogger.super.init(self, level)
    if path == nil then
	error("FileLogger:init must specify path")
    end
    self.file = File.new(path)
end

function FileLogger:write(message)
    local time = os.time()
    time = textutils.formatTime(time, true)

    self.file:append(time .. " " .. message .. "\n")
end

-- MultiLogger
-- agregate loggers

MultiLogger = moz_core.obj.declare_class("MultiLogger", Logger)

function MultiLogger:init(loggers)
    if loggers == nil then
	loggers = {}
    end
    self.loggers = loggers
end

function MultiLogger:add_logger(logger)
    self.loggers[#self.loggers + 1] = logger
end

function MultiLogger:log(level, message)
    for i, logger in pairs(self.loggers) do
	logger:log(level, message)
    end
end

---
-- File handling
---

-- File
--
File = moz_core.obj.declare_class("File")

function File:init(path)
    if path == nil then
	error("File:init must specify path")
    end
    self.path = path
end

function File:exists()
    return io.open(self.file, "r") ~= nil
end

function File:read()
    if not self:exists() then
	error("File:read File (".. self.path ..") not font.")
	return
    end

    local ptr = io.open(self.path, "r")
    local str = ptr:read("*a")
    ptr:close()
    return str
end

function File:write(str)
    ptr = io.open(self.path, "w")
    ptr:write(str)
    ptr:close()
end

function File:append(str)
    ptr = io.open(self.path, "a")
    ptr:write(str)
    ptr:close()
end

---
-- LinkedList
-- a linked list
---

LinkedList = {}
LinkedList.__index = LinkedList

function LinkedList.new()
    local self = moz.utils.obj.new(LinkedList)
    self.head = nil
    self.tail = nil
    return self
end

function LinkedList:is_empty()
    return self.head == nil
end

function LinkedList:prepend(value)
    local node = {}
    node.value = value
    node.prev = nil
    node.next = self.head

    self.head = node

    if node.next ~= nil then
	node.next.prev = node
    end

    if self.tail == nil then
	self.tail = node
    end
end

function LinkedList:prepend_all(values)
    for k, v in pairs(values) do
	self:prepend(v)
    end
end

function LinkedList:insert_at(idx, value)
    local node = {}
    node.value = value
    node.prev = nil

    local next = self:get_node_at(idx)
    if next ~= nil then
	next.prev.next = node
	node.prev = next.prev
    
	next.prev = node
	node.next = next
    end

    if self.head == nil then
	self.head = node
    end
    
    if self.tail == nil then
	self.tail = node
    end
end

function LinkedList:append(value)
    local node = {}
    node.value = value
    node.prev = self.tail
    node.next = nil

    self.tail = node

    if node.prev ~= nil then
	node.prev.next = node
    end

    if self.head == nil then
	self.head = node
    end
end

function LinkedList:append_all(values)
    for k, v in pairs(values) do
	self:append(v)
    end
end

function LinkedList:get_node_at(index)
    local idx = 0
    local node = self.head
    
    while node ~= nil do
	idx = idx + 1
	if idx == index then
	    return node
	end
	node = node.next
    end
    return nil
end

function LinkedList:get(index)
    return self:get_node_at(index).value
end

function LinkedList:first()
    if not self:is_empty() then
	return self.head.value
    end
    return nil
end

function LinkedList:last()
    if not self:is_empty() then
	return self.tail.value
    end
    return nil
end

function LinkedList:pop_first()
    if not self:is_empty() then
	local first = self.head
	local next = self.head.next
	if next ~= nil then
	    next.prev = nil
	end
	self.head = next
	return first.value
    end
    return nil
end

function LinkedList:pop_last()
    if not self:is_empty() then
	local last = self.tail
	local prev = last.prev
	if prev ~= nil then
	    prev.next = nil
	else
	    self.head = nil
	end
	self.tail = prev
	return last.value
    end
    return nil
end

function LinkedList:clear()
    self.head = nil
    self.tail = nil
end

function LinkedList:as_array()
    local items = {}

    local node = self.head
    while node ~= nil do
	items[#items + 1] = node.value
	node = node.next
    end
    return items
end

